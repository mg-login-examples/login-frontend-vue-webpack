name: Push-to-EC2

# Trigger deployment only on push to main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Run unit tests
        run: sudo ./script.sh run-unit-tests
      - name: Zip allure reports
        if: success() || failure()
        run: cd tests/unit && mv allure-results results && zip -r results.zip results
      - name: Copy zipped reports to allure server
        if: success() || failure()
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "tests/unit/results.zip"
          target: "/home/ubuntu/allure-docker/projects/frontend-unit/"
          strip_components: 2
      - name: Delete previous allure-results folder, unzip new results and delete zipped results, and generate report
        if: success() || failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: >-
            cd /home/ubuntu/allure-docker/projects/frontend-unit &&
            sudo rm -rf results &&
            unzip results.zip &&
            rm results.zip &&
            curl http://localhost:5050/allure-docker-service/generate-report?project_id=frontend-unit
      - name: Checkout backend repo
        uses: actions/checkout@v3
        with:
          repository: mg-login-examples/login-backend-fastapi
          path: backend
      - name: Add mysql password text file for a test mysql container
        run: echo "password" >> backend/db/mysql_pwd.txt
      - name: Run e2e tests
        env:
          CYPRESS_MAILSLURP_API_KEY: ${{ secrets.MAILSLURP_API_KEY }}
        run: ./script.sh run-e2e-tests
      - name: Zip allure reports
        if: success() || failure()
        run: cd tests/e2e && mv allure-results results && zip -r results.zip results
      - name: Copy zipped reports to allure server
        if: success() || failure()
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "tests/e2e/results.zip"
          target: "/home/ubuntu/allure-docker/projects/frontend-e2e/"
          strip_components: 2
      - name: Delete previous allure-results folder, unzip new results and delete zipped results, and generate report
        if: success() || failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: >-
            cd /home/ubuntu/allure-docker/projects/frontend-e2e &&
            sudo rm -rf results &&
            unzip results.zip &&
            rm results.zip &&
            curl http://localhost:5050/allure-docker-service/generate-report?project_id=frontend-e2e
      - name: Build & Restart Frontend - build new container to serve latest frontend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: >-
            cd /home/ubuntu &&
            sudo rm -rf frontend-vue-old &&
            mv frontend-vue frontend-vue-old &&
            git clone -b main https://github.com/mg-login-examples/login-frontend-vue.git frontend-vue &&
            cd frontend-vue &&
            git clone -b main https://github.com/mg-login-examples/login-backend-fastapi.git backend &&
            cd .. &&
            cp frontend-vue-old/backend/db/mysql_pwd.txt frontend-vue/backend/db/ &&
            sudo rm -rf frontend-vue-old &&
            cd frontend-vue &&
            ./script.sh launch-frontend-cloud-dev